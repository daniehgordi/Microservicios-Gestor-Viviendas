package com.gestor.service;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.gestor.dao.PropiedadDao;
import com.gestor.dto.MovimientoDto;
import com.gestor.dto.UsuarioDto;
import com.gestor.model.Propiedad;

@Service
public class PropiedadServiceImplement implements PropiedadService{
	
	@Autowired
	PropiedadDao dao;
	
	@Autowired
	private RestTemplate template;
	
	private String urlUsuarios="http://localhost:9090/";
	
	private String urlMovimientos="http://localhost:8080/";
	private String urlImpuestos="http://localhost:9000/";
	private String urlDeudas="http://localhost:8000/";
	
	@Override
	public double rendimientoNeto(int idPropiedad) {
		double ingresosTotales = 0;
		double gastosTotales = 0;
		List<MovimientoDto> listadoMovimientos = Arrays.asList(template.getForObject(urlMovimientos + "movimientos", MovimientoDto[].class));
		for(MovimientoDto movimiento:listadoMovimientos) {
			
		}
		
		List<MovimientoDto> listadoIngresos = dao.findAllByTipo("ingreso");
		List<MovimientoDto> listadoGastos = dao.findAllByTipo("gasto");
		for(MovimientoDto movimiento:listadoIngresos) {
			if(movimiento.getIdPropiedad()==idPropiedad) {
				ingresosTotales += movimiento.getCantidad();
			}	
		}
		for(MovimientoDto movimiento1:listadoGastos) {
			if(movimiento1.getIdPropiedad()==idPropiedad) {
				gastosTotales += movimiento1.getCantidad();
			}
		}
		double rendimientoNeto = ingresosTotales - gastosTotales;
		
		return rendimientoNeto;
	}
	
	
	@Override
	public List<Propiedad> propiedadesUsuario(int idUsuario) {
		int userId = 0;
		List<UsuarioDto> listaUsuarios = Arrays.asList(template.getForObject(urlUsuarios + "usuarios", UsuarioDto[].class));
		for(UsuarioDto user:listaUsuarios) {
			if(user.getIdUsuario() == idUsuario) {
				userId = user.getIdUsuario();
			}
			
		}
		List<Propiedad> listadoPropiedadesPorUsuario = dao.findByIdUsuario(userId);
		return listadoPropiedadesPorUsuario;
	}

	@Override
	public List<Propiedad> listadoPropiedades() {
		return dao.findAll();
	}

	@Override
	public void crearPropiedad(Propiedad propiedad) {
		dao.save(propiedad);
		
	}

	@Override
	public void borrarLista(int idPropiedad) {
		dao.deleteById(idPropiedad);
		
	}

	@Override
	public Propiedad buscarPropiedad(int idPropiedad) {
		return dao.findById(idPropiedad).orElse(null);
	}

	

	

	

}
